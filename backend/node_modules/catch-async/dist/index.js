'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _includes = require('lodash/includes');

var _includes2 = _interopRequireDefault(_includes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var LOG_TYPES = ['error', 'warn', 'info'];

/**
 * Logs an error to the console
 *
 * @param {any} error The error to log
 * @param {string} [logType='error'] Determines what kind of logging
 * method should be used to log the error
 * @private
 */
function logError(error) {
  var logType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'error';

  if (!(0, _includes2.default)(LOG_TYPES, logType)) {
    throw new Error('catch-async: Error type provided "' + logType + '" is not valid');
  }
  // eslint-disable-next-line no-console
  console.error(error);
}

/**
 * Returns an async function wrapped in a try catch function. It
 * will by default log any error thrown in the async function unless
 * a handleError function is provided. In that case it will instead
 * call handleError
 *
 * @export
 * @param {Function} asyncFunction
 * @param {Object} [options]
 * @param {Function} [options.handleError] if this function is provided
 * then catchAsync will call it instead of logging the error
 * @param {String} [options.logType='error'] determines what logging method
 * is used when an error is caught. Can be 'error', 'info', 'log' or 'warn'
 * @returns {Function} Wrapped async function
 */
function catchAsync(asyncFunction) {
  var _this = this;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      handleError = _ref.handleError,
      logType = _ref.logType;

  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return asyncFunction.apply(undefined, _args);

          case 3:
            _context.next = 11;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](0);

            if (!(typeof handleError === 'function')) {
              _context.next = 10;
              break;
            }

            handleError(_context.t0);
            return _context.abrupt('return');

          case 10:

            logError(_context.t0, logType);

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this, [[0, 5]]);
  }));
}

exports.default = catchAsync;